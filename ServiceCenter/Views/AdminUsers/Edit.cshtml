@model ServiceCenter.ViewModels.UserEditViewModel
@{
    ViewBag.Title = "Editar Usuario";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row justify-content-center mt-5">
    <div class="col-md-8">
        <div class="card shadow-sm">
            <div class="card-header bg-warning text-dark">
                <h4 class="mb-0"><i class="fas fa-user-edit me-2"></i>Editar Usuario</h4>
            </div>

            <div class="card-body bg-dark text-white">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.Id)

                    @* Nombre de usuario *@
                    <div class="form-floating mb-3">
                        @Html.TextBoxFor(m => m.UserName, new { @class = "form-control bg-secondary text-white", placeholder = "Usuario" })
                        <label>@Html.DisplayNameFor(m => m.UserName)</label>
                        @Html.ValidationMessageFor(m => m.UserName, "", new { @class = "text-danger small" })
                    </div>

                    @* Email (readonly) *@
            <div class="form-floating mb-3">
               

                @Html.TextBoxFor(m => m.Email,
                    new
                      {
                      @class = "form-control bg-secondary text-white",
                      @readonly = "readonly"
                    })
                @Html.LabelFor(m => m.Email, new { @class = "form-label" })
                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger small" })
            </div>

                    @* Nombre completo *@
                    <div class="form-floating mb-3">
                        @Html.TextBoxFor(m => m.Nombre, new { @class = "form-control bg-secondary text-white", placeholder = "Nombre completo" })
                        <label>@Html.DisplayNameFor(m => m.Nombre)</label>
                        @Html.ValidationMessageFor(m => m.Nombre, "", new { @class = "text-danger small" })
                    </div>

                    <hr class="border-secondary" />

                    @* Lockout *@
                    <div class="form-check form-switch mb-3">
                        @Html.CheckBoxFor(m => m.LockoutEnabled, new { @class = "form-check-input", id = "lockoutEnabled" })
                        @Html.LabelFor(m => m.LockoutEnabled, new { @class = "form-check-label text-white" })
                    </div>
                    <div id="lockoutDateContainer" class="mb-3" style="display: @(Model.LockoutEnabled ? "block" : "none")">
                        <label class="form-label text-white">@Html.DisplayNameFor(m => m.LockoutEndDateUtc)</label>
                        @Html.TextBoxFor(m => m.LockoutEndDateUtc, "{0:yyyy-MM-ddTHH:mm}",
                            new { type = "datetime-local", @class = "form-control bg-secondary text-white" })
                        @Html.ValidationMessageFor(m => m.LockoutEndDateUtc, "", new { @class = "text-danger small" })
                    </div>

                    <hr class="border-secondary" />

                    @* Nueva contraseña *@
                    <div class="form-floating mb-3">
                        @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control bg-secondary text-white", placeholder = "Nueva contraseña" })
                        <label>@Html.DisplayNameFor(m => m.NewPassword)</label>
                        @Html.ValidationMessageFor(m => m.NewPassword, "", new { @class = "text-danger small" })
                    </div>
                    <div class="form-floating mb-3">
                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control bg-secondary text-white", placeholder = "Confirmar contraseña" })
                        <label>@Html.DisplayNameFor(m => m.ConfirmPassword)</label>
                        @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger small" })
                    </div>

                    <hr class="border-secondary" />

                    @* Roles *@
                    <label class="form-label">Roles</label>
                    <div class="d-flex flex-wrap mb-4">
                        @foreach (var role in Model.AllRoles)
                        {
                            var isChecked = Model.SelectedRoles.Contains(role.Value);
                            <div class="form-check me-3 mb-2">
                                <input class="form-check-input" type="checkbox"
                                       name="SelectedRoles" value="@role.Value"
                                       id="role_@role.Value" @(isChecked ? "checked" : "") />
                                <label class="form-check-label text-white" for="role_@role.Value">
                                    @role.Text
                                </label>
                            </div>
                        }
                    </div>

                    @* Botones *@
                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-success me-2">
                            <i class="fas fa-save me-1"></i> Guardar
                        </button>
                        @Html.ActionLink("Volver", "Index", null, new { @class = "btn btn-outline-light" })
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(function () {
            $('#lockoutEnabled').change(function () {
                $('#lockoutDateContainer')
                    .stop()
                    .slideToggle($(this).is(':checked'));
            });
        });
    </script>
}
